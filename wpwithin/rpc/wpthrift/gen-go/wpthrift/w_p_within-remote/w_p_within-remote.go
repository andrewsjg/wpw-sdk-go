// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"github.com/wptechinnovation/worldpay-within-sdk/sdkcore/wpwithin/rpc/wpthrift/gen-go/wpthrift_types"
        "github.com/wptechinnovation/worldpay-within-sdk/sdkcore/wpwithin/rpc/wpthrift/gen-go/wpthrift"
)

var _ = wpthrift_types.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void setup(string name, string description)")
  fmt.Fprintln(os.Stderr, "  void addService(Service svc)")
  fmt.Fprintln(os.Stderr, "  void removeService(Service svc)")
  fmt.Fprintln(os.Stderr, "  void initConsumer(string scheme, string hostname, i32 port, string urlPrefix, string clientID, HCECard hceCard,  pspConfig)")
  fmt.Fprintln(os.Stderr, "  void initProducer( pspConfig)")
  fmt.Fprintln(os.Stderr, "  Device getDevice()")
  fmt.Fprintln(os.Stderr, "  void startServiceBroadcast(i32 timeoutMillis)")
  fmt.Fprintln(os.Stderr, "  void stopServiceBroadcast()")
  fmt.Fprintln(os.Stderr, "   deviceDiscovery(i32 timeoutMillis)")
  fmt.Fprintln(os.Stderr, "   requestServices()")
  fmt.Fprintln(os.Stderr, "   getServicePrices(i32 serviceId)")
  fmt.Fprintln(os.Stderr, "  TotalPriceResponse selectService(i32 serviceId, i32 numberOfUnits, i32 priceId)")
  fmt.Fprintln(os.Stderr, "  PaymentResponse makePayment(TotalPriceResponse request)")
  fmt.Fprintln(os.Stderr, "  ServiceDeliveryToken beginServiceDelivery(i32 serviceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsToSupply)")
  fmt.Fprintln(os.Stderr, "  ServiceDeliveryToken endServiceDelivery(i32 serviceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsReceived)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := wpthrift.NewWPWithinClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Setup requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.Setup(value0, value1))
    fmt.Print("\n")
    break
  case "addService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddService requires 1 args")
      flag.Usage()
    }
    arg41 := flag.Arg(1)
    mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
    defer mbTrans42.Close()
    _, err43 := mbTrans42.WriteString(arg41)
    if err43 != nil {
      Usage()
      return
    }
    factory44 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt45 := factory44.GetProtocol(mbTrans42)
    argvalue0 := wpthrift_types.NewService()
    err46 := argvalue0.Read(jsProt45)
    if err46 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddService(value0))
    fmt.Print("\n")
    break
  case "removeService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveService requires 1 args")
      flag.Usage()
    }
    arg47 := flag.Arg(1)
    mbTrans48 := thrift.NewTMemoryBufferLen(len(arg47))
    defer mbTrans48.Close()
    _, err49 := mbTrans48.WriteString(arg47)
    if err49 != nil {
      Usage()
      return
    }
    factory50 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt51 := factory50.GetProtocol(mbTrans48)
    argvalue0 := wpthrift_types.NewService()
    err52 := argvalue0.Read(jsProt51)
    if err52 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveService(value0))
    fmt.Print("\n")
    break
  case "initConsumer":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "InitConsumer requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err55 := (strconv.Atoi(flag.Arg(3)))
    if err55 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg58 := flag.Arg(6)
    mbTrans59 := thrift.NewTMemoryBufferLen(len(arg58))
    defer mbTrans59.Close()
    _, err60 := mbTrans59.WriteString(arg58)
    if err60 != nil {
      Usage()
      return
    }
    factory61 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt62 := factory61.GetProtocol(mbTrans59)
    argvalue5 := wpthrift_types.NewHCECard()
    err63 := argvalue5.Read(jsProt62)
    if err63 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    arg64 := flag.Arg(7)
    mbTrans65 := thrift.NewTMemoryBufferLen(len(arg64))
    defer mbTrans65.Close()
    _, err66 := mbTrans65.WriteString(arg64)
    if err66 != nil { 
      Usage()
      return
    }
    factory67 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt68 := factory67.GetProtocol(mbTrans65)
    containerStruct6 := wpthrift.NewWPWithinInitConsumerArgs()
    err69 := containerStruct6.ReadField7(jsProt68)
    if err69 != nil {
      Usage()
      return
    }
    argvalue6 := containerStruct6.PspConfig
    value6 := argvalue6
    fmt.Print(client.InitConsumer(value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "initProducer":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InitProducer requires 1 args")
      flag.Usage()
    }
    arg70 := flag.Arg(1)
    mbTrans71 := thrift.NewTMemoryBufferLen(len(arg70))
    defer mbTrans71.Close()
    _, err72 := mbTrans71.WriteString(arg70)
    if err72 != nil { 
      Usage()
      return
    }
    factory73 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt74 := factory73.GetProtocol(mbTrans71)
    containerStruct0 := wpthrift.NewWPWithinInitProducerArgs()
    err75 := containerStruct0.ReadField1(jsProt74)
    if err75 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PspConfig
    value0 := argvalue0
    fmt.Print(client.InitProducer(value0))
    fmt.Print("\n")
    break
  case "getDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetDevice())
    fmt.Print("\n")
    break
  case "startServiceBroadcast":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartServiceBroadcast requires 1 args")
      flag.Usage()
    }
    tmp0, err76 := (strconv.Atoi(flag.Arg(1)))
    if err76 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.StartServiceBroadcast(value0))
    fmt.Print("\n")
    break
  case "stopServiceBroadcast":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "StopServiceBroadcast requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.StopServiceBroadcast())
    fmt.Print("\n")
    break
  case "deviceDiscovery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeviceDiscovery requires 1 args")
      flag.Usage()
    }
    tmp0, err77 := (strconv.Atoi(flag.Arg(1)))
    if err77 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.DeviceDiscovery(value0))
    fmt.Print("\n")
    break
  case "requestServices":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "RequestServices requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.RequestServices())
    fmt.Print("\n")
    break
  case "getServicePrices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetServicePrices requires 1 args")
      flag.Usage()
    }
    tmp0, err78 := (strconv.Atoi(flag.Arg(1)))
    if err78 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetServicePrices(value0))
    fmt.Print("\n")
    break
  case "selectService":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SelectService requires 3 args")
      flag.Usage()
    }
    tmp0, err79 := (strconv.Atoi(flag.Arg(1)))
    if err79 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err80 := (strconv.Atoi(flag.Arg(2)))
    if err80 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err81 := (strconv.Atoi(flag.Arg(3)))
    if err81 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.SelectService(value0, value1, value2))
    fmt.Print("\n")
    break
  case "makePayment":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MakePayment requires 1 args")
      flag.Usage()
    }
    arg82 := flag.Arg(1)
    mbTrans83 := thrift.NewTMemoryBufferLen(len(arg82))
    defer mbTrans83.Close()
    _, err84 := mbTrans83.WriteString(arg82)
    if err84 != nil {
      Usage()
      return
    }
    factory85 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt86 := factory85.GetProtocol(mbTrans83)
    argvalue0 := wpthrift_types.NewTotalPriceResponse()
    err87 := argvalue0.Read(jsProt86)
    if err87 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MakePayment(value0))
    fmt.Print("\n")
    break
  case "beginServiceDelivery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "BeginServiceDelivery requires 3 args")
      flag.Usage()
    }
    tmp0, err88 := (strconv.Atoi(flag.Arg(1)))
    if err88 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg89 := flag.Arg(2)
    mbTrans90 := thrift.NewTMemoryBufferLen(len(arg89))
    defer mbTrans90.Close()
    _, err91 := mbTrans90.WriteString(arg89)
    if err91 != nil {
      Usage()
      return
    }
    factory92 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt93 := factory92.GetProtocol(mbTrans90)
    argvalue1 := wpthrift_types.NewServiceDeliveryToken()
    err94 := argvalue1.Read(jsProt93)
    if err94 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err95 := (strconv.Atoi(flag.Arg(3)))
    if err95 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.BeginServiceDelivery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "endServiceDelivery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "EndServiceDelivery requires 3 args")
      flag.Usage()
    }
    tmp0, err96 := (strconv.Atoi(flag.Arg(1)))
    if err96 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg97 := flag.Arg(2)
    mbTrans98 := thrift.NewTMemoryBufferLen(len(arg97))
    defer mbTrans98.Close()
    _, err99 := mbTrans98.WriteString(arg97)
    if err99 != nil {
      Usage()
      return
    }
    factory100 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt101 := factory100.GetProtocol(mbTrans98)
    argvalue1 := wpthrift_types.NewServiceDeliveryToken()
    err102 := argvalue1.Read(jsProt101)
    if err102 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err103 := (strconv.Atoi(flag.Arg(3)))
    if err103 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.EndServiceDelivery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
