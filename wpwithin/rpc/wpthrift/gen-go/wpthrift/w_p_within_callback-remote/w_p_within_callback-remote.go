// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/WPTechInnovation/wpw-sdk-go/wpwithin/rpc/wpthrift/gen-go/wpthrift"
	"github.com/WPTechInnovation/wpw-sdk-go/wpwithin/rpc/wpthrift/gen-go/wpthrift_types"
)

var _ = wpthrift_types.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void beginServiceDelivery(i32 serviceID, i32 servicePriceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsToSupply)")
  fmt.Fprintln(os.Stderr, "  void endServiceDelivery(i32 serviceID, ServiceDeliveryToken serviceDeliveryToken, i32 unitsReceived)")
  fmt.Fprintln(os.Stderr, "  void makePaymentEvent(i32 totalPrice, string orderCurrency, string clientToken, string orderDescription, string uuid)")
  fmt.Fprintln(os.Stderr, "  void serviceDiscoveryEvent(string remoteAddr)")
  fmt.Fprintln(os.Stderr, "  void servicePricesEvent(string remoteAddr, i32 serviceId)")
  fmt.Fprintln(os.Stderr, "  void serviceTotalPriceEvent(string remoteAddr, i32 serviceID, TotalPriceResponse totalPriceResp)")
  fmt.Fprintln(os.Stderr, "  void errorEvent(string msg)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := wpthrift.NewWPWithinCallbackClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "beginServiceDelivery":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "BeginServiceDelivery requires 4 args")
      flag.Usage()
    }
    tmp0, err122 := (strconv.Atoi(flag.Arg(1)))
    if err122 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err123 := (strconv.Atoi(flag.Arg(2)))
    if err123 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg124 := flag.Arg(3)
    mbTrans125 := thrift.NewTMemoryBufferLen(len(arg124))
    defer mbTrans125.Close()
    _, err126 := mbTrans125.WriteString(arg124)
    if err126 != nil {
      Usage()
      return
    }
    factory127 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt128 := factory127.GetProtocol(mbTrans125)
    argvalue2 := wpthrift_types.NewServiceDeliveryToken()
    err129 := argvalue2.Read(jsProt128)
    if err129 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err130 := (strconv.Atoi(flag.Arg(4)))
    if err130 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.BeginServiceDelivery(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "endServiceDelivery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "EndServiceDelivery requires 3 args")
      flag.Usage()
    }
    tmp0, err131 := (strconv.Atoi(flag.Arg(1)))
    if err131 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg132 := flag.Arg(2)
    mbTrans133 := thrift.NewTMemoryBufferLen(len(arg132))
    defer mbTrans133.Close()
    _, err134 := mbTrans133.WriteString(arg132)
    if err134 != nil {
      Usage()
      return
    }
    factory135 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt136 := factory135.GetProtocol(mbTrans133)
    argvalue1 := wpthrift_types.NewServiceDeliveryToken()
    err137 := argvalue1.Read(jsProt136)
    if err137 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err138 := (strconv.Atoi(flag.Arg(3)))
    if err138 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.EndServiceDelivery(value0, value1, value2))
    fmt.Print("\n")
    break
  case "makePaymentEvent":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "MakePaymentEvent requires 5 args")
      flag.Usage()
    }
    tmp0, err139 := (strconv.Atoi(flag.Arg(1)))
    if err139 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.MakePaymentEvent(value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "serviceDiscoveryEvent":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ServiceDiscoveryEvent requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ServiceDiscoveryEvent(value0))
    fmt.Print("\n")
    break
  case "servicePricesEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ServicePricesEvent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err146 := (strconv.Atoi(flag.Arg(2)))
    if err146 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ServicePricesEvent(value0, value1))
    fmt.Print("\n")
    break
  case "serviceTotalPriceEvent":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ServiceTotalPriceEvent requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err148 := (strconv.Atoi(flag.Arg(2)))
    if err148 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg149 := flag.Arg(3)
    mbTrans150 := thrift.NewTMemoryBufferLen(len(arg149))
    defer mbTrans150.Close()
    _, err151 := mbTrans150.WriteString(arg149)
    if err151 != nil {
      Usage()
      return
    }
    factory152 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt153 := factory152.GetProtocol(mbTrans150)
    argvalue2 := wpthrift_types.NewTotalPriceResponse()
    err154 := argvalue2.Read(jsProt153)
    if err154 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.ServiceTotalPriceEvent(value0, value1, value2))
    fmt.Print("\n")
    break
  case "errorEvent":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ErrorEvent requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ErrorEvent(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
